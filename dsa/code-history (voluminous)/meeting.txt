Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes 
is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

input :
dummy -> 1 -> 2 -> 3 -> 4 -> 5

output: 
2 -> 1 -> 4 -> 3 -> 5

ListNode* reverse(ListNode* head, int counter, int k){
    if(counter == k-1 || !head){
        return head;
    }

    ListNode* newHead = reverse(head->next, counter+1, k);

    head->next->next = head;
    head->next = NULL;
    return newHead;

}

k = 3
dummy -> 1 <- 2 <- 3  4 -> 5
         head

newHewad = 3

counter = 2



NULL <- 1 <- 2 <- 3

k = 3
newHead = 3
counter = 2

ListNode* reverseKGroup(ListNode* head, int k) {
    
    // make dummy node
    ListNode* dummy = new ListNode;
    dummy->val = -1;
    dummy->next = head;

    // reverse nodes (with counter that terminates at k)
    ListNode* temp = head;
    ListNpde* nextNode = head;
    int counter = 0;
    
    while(counter <= k && nextNode->next){
        nextNode = nextNode->next;
        counter++;
    }

    ListNode* newHead = reverse(temp, 0, k);
    dummy->next = newHead;

    counter = 0;
    temp = nextNode;
    while(counter < k && temp->next){
        temp = temp->next;
        counter++;
    }

    temp->next = nextNode;
    
    // make a counter = 0;
    // ListNode* next 
    // while counter < k :
    // reverse 

    // 
}

k = 2

input :
-1(dummy) -> 1         -> 2 -> 3 -> 4 -> 5
             temp
                               nextNode

counter = 2



output: 
2 -> 1 -> 4 -> 3 -> 5

